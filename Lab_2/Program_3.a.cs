using System;

class Program
{
    static void Main(string[] args)
    {
        // Виводимо повідомлення для користувача про введення розміру масиву
        Console.WriteLine("Введіть розмірність масиву:");
        // Оголошуємо змінну n, яка буде зберігати розмір масиву
        int n;
        // Виконуємо цикл, поки користувач не введе коректне ціле додатне число
        while (!int.TryParse(Console.ReadLine(), out n) || n <= 0)
        {
            // Виводимо повідомлення про невірне введення
            Console.WriteLine("Введіть коректне ціле додатне число для розміру масиву:");
        }

        // Створюємо масив цілих чисел розміром n
        int[] array = new int[n];
        // Виводимо повідомлення для користувача про введення елементів масиву
        Console.WriteLine("Введіть елементи масиву:");

        // Цикл для введення кожного елементу масиву
        for (int i = 0; i < n; i++)
        {
            // Виводимо повідомлення з номером елементу, який потрібно ввести
            Console.Write($"Елемент {i + 1}: ");
            // Цикл, який триватиме доти, доки користувач не введе коректне ціле число
            while (!int.TryParse(Console.ReadLine(), out array[i]))
            {
                // Виводимо повідомлення про невірне введення
                Console.WriteLine("Введіть коректне ціле число:");
            }
        }

        // Викликаємо метод CountZeros для підрахунку нульових елементів
        int countZeros = CountZeros(array);
        // Викликаємо метод ProductAfterMaxAbs для обчислення добутку елементів після максимального за модулем елемента
        int productAfterMaxAbs = ProductAfterMaxAbs(array);

        // Виводимо результати на екран
        Console.WriteLine($"Кількість нульових елементів: {countZeros}");
        Console.WriteLine($"Добуток елементів після максимального за модулем елемента: {productAfterMaxAbs}");
    }

    // Метод для підрахунку нульових елементів в масиві
    static int CountZeros(int[] array)
    {
        // Локальна змінна для зберігання кількості нульових елементів
        int count = 0;
        // Проходимося по всіх елементах масиву
        foreach (int num in array)
        {
            // Якщо поточний елемент дорівнює 0, збільшуємо лічильник
            if (num == 0)
            {
                count++;
            }
        }
        // Повертаємо кількість нульових елементів
        return count;
    }

    // Метод для обчислення добутку елементів після максимального за модулем елемента
    static int ProductAfterMaxAbs(int[] array)
    {
        // Перевіряємо, чи масив не порожній
        if (array.Length == 0)
        {
            // Якщо порожній, викидаємо виняток з відповідним повідомленням
            throw new ArgumentException("Масив порожній.");
        }

        // Знаходимо індекс максимального за модулем елемента
        int maxAbsIndex = 0;
        for (int i = 1; i < array.Length; i++)
        {
            if (Math.Abs(array[i]) > Math.Abs(array[maxAbsIndex]))
            {
                maxAbsIndex = i;
            }
        }

        // Перевіряємо, чи максимальний за модулем елемент не є останнім елементом масиву
        if (maxAbsIndex == array.Length - 1)
        {
            // Якщо так, викидаємо виняток з відповідним повідомленням
            throw new ArgumentException("Максимальний за модулем елемент розташований в кінці масиву.");
        }

        // Ініціалізуємо змінну для зберігання добутку
        int product = 1;
        // Обчислюємо добуток елементів після максимального за модулем елемента
        for (int i = maxAbsIndex + 1; i < array.Length; i++)
        {
            product *= array[i];
        }

        // Повертаємо результат
        return product;
    }
}

